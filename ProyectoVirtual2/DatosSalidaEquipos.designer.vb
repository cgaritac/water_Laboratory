'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BDLABORATORIO")>  _
Partial Public Class DatosSalidaEquiposDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertTBSALIDAEQU(instance As TBSALIDAEQU)
    End Sub
  Partial Private Sub UpdateTBSALIDAEQU(instance As TBSALIDAEQU)
    End Sub
  Partial Private Sub DeleteTBSALIDAEQU(instance As TBSALIDAEQU)
    End Sub
  Partial Private Sub InsertTBENTRADAMUESTRA(instance As TBENTRADAMUESTRA)
    End Sub
  Partial Private Sub UpdateTBENTRADAMUESTRA(instance As TBENTRADAMUESTRA)
    End Sub
  Partial Private Sub DeleteTBENTRADAMUESTRA(instance As TBENTRADAMUESTRA)
    End Sub
  Partial Private Sub InsertTBRESULT(instance As TBRESULT)
    End Sub
  Partial Private Sub UpdateTBRESULT(instance As TBRESULT)
    End Sub
  Partial Private Sub DeleteTBRESULT(instance As TBRESULT)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.ProyectoVirtual2.My.MySettings.Default.BDLABORATORIOConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property TBSALIDAEQU() As System.Data.Linq.Table(Of TBSALIDAEQU)
		Get
			Return Me.GetTable(Of TBSALIDAEQU)
		End Get
	End Property
	
	Public ReadOnly Property TBENTRADAMUESTRA() As System.Data.Linq.Table(Of TBENTRADAMUESTRA)
		Get
			Return Me.GetTable(Of TBENTRADAMUESTRA)
		End Get
	End Property
	
	Public ReadOnly Property TBRESULT() As System.Data.Linq.Table(Of TBRESULT)
		Get
			Return Me.GetTable(Of TBRESULT)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GUARDAR_SALIDAEQUIPO")>  _
	Public Function GUARDAR_SALIDAEQUIPO(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDMuestreo", DbType:="Int")> ByRef iDMuestreo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FechaSalida", DbType:="Date")> ByVal fechaSalida As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Responsable", DbType:="VarChar(20)")> ByVal responsable As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TipoPrueba", DbType:="VarChar(50)")> ByVal tipoPrueba As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cliente", DbType:="VarChar(50)")> ByVal cliente As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TelCliente", DbType:="Int")> ByVal telCliente As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CorreoCliente", DbType:="VarChar(50)")> ByVal correoCliente As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pestador", DbType:="VarChar(25)")> ByVal pestador As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Sistema", DbType:="VarChar(50)")> ByVal sistema As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Urgente", DbType:="VarChar(5)")> ByVal urgente As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Observaciones", DbType:="VarChar(500)")> ByVal observaciones As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iDMuestreo, fechaSalida, responsable, tipoPrueba, cliente, telCliente, correoCliente, pestador, sistema, urgente, observaciones)
		iDMuestreo = CType(result.GetParameterValue(0),System.Nullable(Of Integer))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GUARDAR_ENTRADAMUESTRA")>  _
	Public Function GUARDAR_ENTRADAMUESTRA(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDEntrada", DbType:="Int")> ByRef iDEntrada As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDMuestreo", DbType:="Int")> ByVal iDMuestreo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FechaEntrada", DbType:="Date")> ByVal fechaEntrada As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FechaMuestreo", DbType:="Date")> ByVal fechaMuestreo As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Muestreador", DbType:="VarChar(50)")> ByVal muestreador As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PuntoMuestreo", DbType:="VarChar(50)")> ByVal puntoMuestreo As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NombrePuntoMuestreo", DbType:="VarChar(50)")> ByVal nombrePuntoMuestreo As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pruebas", DbType:="VarChar(50)")> ByVal pruebas As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Observaciones", DbType:="VarChar(500)")> ByVal observaciones As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MSJ", DbType:="VarChar(50)")> ByRef mSJ As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iDEntrada, iDMuestreo, fechaEntrada, fechaMuestreo, muestreador, puntoMuestreo, nombrePuntoMuestreo, pruebas, observaciones, mSJ)
		iDEntrada = CType(result.GetParameterValue(0),System.Nullable(Of Integer))
		mSJ = CType(result.GetParameterValue(9),String)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GUARDAR_RESULT")>  _
	Public Function GUARDAR_RESULT(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDResult", DbType:="Int")> ByRef iDResult As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDMuestreo", DbType:="Int")> ByVal iDMuestreo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nivel", DbType:="VarChar(20)")> ByVal nivel As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Parametro", DbType:="VarChar(50)")> ByVal parametro As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ValorResul", DbType:="Float")> ByVal valorResul As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Unidades", DbType:="VarChar(15)")> ByVal unidades As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VMA", DbType:="Float")> ByVal vMA As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Conformidad", DbType:="VarChar(15)")> ByVal conformidad As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iDResult, iDMuestreo, nivel, parametro, valorResul, unidades, vMA, conformidad)
		iDResult = CType(result.GetParameterValue(0),System.Nullable(Of Integer))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ELIMINAR_ENTRADAMUESTRA")>  _
	Public Function ELIMINAR_ENTRADAMUESTRA(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDMuestreo", DbType:="Int")> ByVal iDMuestreo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MSJ", DbType:="VarChar(100)")> ByRef mSJ As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iDMuestreo, mSJ)
		mSJ = CType(result.GetParameterValue(1),String)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ELIMINAR_RESULT")>  _
	Public Function ELIMINAR_RESULT(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDMuestreo", DbType:="Int")> ByVal iDMuestreo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MSJ", DbType:="VarChar(100)")> ByRef mSJ As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iDMuestreo, mSJ)
		mSJ = CType(result.GetParameterValue(1),String)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ELIMINAR_SALIDAEQUIPO")>  _
	Public Function ELIMINAR_SALIDAEQUIPO(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDMuestreo", DbType:="Int")> ByVal iDMuestreo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MSJ", DbType:="VarChar(100)")> ByRef mSJ As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iDMuestreo, mSJ)
		mSJ = CType(result.GetParameterValue(1),String)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.BUSCAR_ENTRADAMUESTRA")>  _
	Public Function BUSCAR_ENTRADAMUESTRA(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDMuestreo", DbType:="Int")> ByVal iDMuestreo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MSJ", DbType:="VarChar(100)")> ByRef mSJ As String) As ISingleResult(Of BUSCAR_ENTRADAMUESTRAResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iDMuestreo, mSJ)
		mSJ = CType(result.GetParameterValue(1),String)
		Return CType(result.ReturnValue,ISingleResult(Of BUSCAR_ENTRADAMUESTRAResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.BUSCAR_RESULT")>  _
	Public Function BUSCAR_RESULT(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDMuestreo", DbType:="Int")> ByVal iDMuestreo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MSJ", DbType:="VarChar(100)")> ByRef mSJ As String) As ISingleResult(Of BUSCAR_RESULTResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iDMuestreo, mSJ)
		mSJ = CType(result.GetParameterValue(1),String)
		Return CType(result.ReturnValue,ISingleResult(Of BUSCAR_RESULTResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.BUSCAR_SALIDAEQUIPO")>  _
	Public Function BUSCAR_SALIDAEQUIPO(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDMuestreo", DbType:="Int")> ByVal iDMuestreo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MSJ", DbType:="VarChar(100)")> ByRef mSJ As String) As ISingleResult(Of BUSCAR_SALIDAEQUIPOResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iDMuestreo, mSJ)
		mSJ = CType(result.GetParameterValue(1),String)
		Return CType(result.ReturnValue,ISingleResult(Of BUSCAR_SALIDAEQUIPOResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TBSALIDAEQU")>  _
Partial Public Class TBSALIDAEQU
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDMuestreo As Integer
	
	Private _FechaSalida As System.Nullable(Of Date)
	
	Private _Responsable As String
	
	Private _TipoPrueba As String
	
	Private _Cliente As String
	
	Private _TelCliente As Integer
	
	Private _CorreoCliente As String
	
	Private _Pestador As String
	
	Private _Sistema As String
	
	Private _Urgente As String
	
	Private _Observaciones As String
	
	Private _TBENTRADAMUESTRA As EntitySet(Of TBENTRADAMUESTRA)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDMuestreoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDMuestreoChanged()
    End Sub
    Partial Private Sub OnFechaSalidaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaSalidaChanged()
    End Sub
    Partial Private Sub OnResponsableChanging(value As String)
    End Sub
    Partial Private Sub OnResponsableChanged()
    End Sub
    Partial Private Sub OnTipoPruebaChanging(value As String)
    End Sub
    Partial Private Sub OnTipoPruebaChanged()
    End Sub
    Partial Private Sub OnClienteChanging(value As String)
    End Sub
    Partial Private Sub OnClienteChanged()
    End Sub
    Partial Private Sub OnTelClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnTelClienteChanged()
    End Sub
    Partial Private Sub OnCorreoClienteChanging(value As String)
    End Sub
    Partial Private Sub OnCorreoClienteChanged()
    End Sub
    Partial Private Sub OnPestadorChanging(value As String)
    End Sub
    Partial Private Sub OnPestadorChanged()
    End Sub
    Partial Private Sub OnSistemaChanging(value As String)
    End Sub
    Partial Private Sub OnSistemaChanged()
    End Sub
    Partial Private Sub OnUrgenteChanging(value As String)
    End Sub
    Partial Private Sub OnUrgenteChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TBENTRADAMUESTRA = New EntitySet(Of TBENTRADAMUESTRA)(AddressOf Me.attach_TBENTRADAMUESTRA, AddressOf Me.detach_TBENTRADAMUESTRA)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDMuestreo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDMuestreo() As Integer
		Get
			Return Me._IDMuestreo
		End Get
		Set
			If ((Me._IDMuestreo = value)  _
						= false) Then
				Me.OnIDMuestreoChanging(value)
				Me.SendPropertyChanging
				Me._IDMuestreo = value
				Me.SendPropertyChanged("IDMuestreo")
				Me.OnIDMuestreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaSalida", DbType:="Date")>  _
	Public Property FechaSalida() As System.Nullable(Of Date)
		Get
			Return Me._FechaSalida
		End Get
		Set
			If (Me._FechaSalida.Equals(value) = false) Then
				Me.OnFechaSalidaChanging(value)
				Me.SendPropertyChanging
				Me._FechaSalida = value
				Me.SendPropertyChanged("FechaSalida")
				Me.OnFechaSalidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Responsable", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Responsable() As String
		Get
			Return Me._Responsable
		End Get
		Set
			If (String.Equals(Me._Responsable, value) = false) Then
				Me.OnResponsableChanging(value)
				Me.SendPropertyChanging
				Me._Responsable = value
				Me.SendPropertyChanged("Responsable")
				Me.OnResponsableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoPrueba", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoPrueba() As String
		Get
			Return Me._TipoPrueba
		End Get
		Set
			If (String.Equals(Me._TipoPrueba, value) = false) Then
				Me.OnTipoPruebaChanging(value)
				Me.SendPropertyChanging
				Me._TipoPrueba = value
				Me.SendPropertyChanged("TipoPrueba")
				Me.OnTipoPruebaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Cliente() As String
		Get
			Return Me._Cliente
		End Get
		Set
			If (String.Equals(Me._Cliente, value) = false) Then
				Me.OnClienteChanging(value)
				Me.SendPropertyChanging
				Me._Cliente = value
				Me.SendPropertyChanged("Cliente")
				Me.OnClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelCliente", DbType:="Int NOT NULL")>  _
	Public Property TelCliente() As Integer
		Get
			Return Me._TelCliente
		End Get
		Set
			If ((Me._TelCliente = value)  _
						= false) Then
				Me.OnTelClienteChanging(value)
				Me.SendPropertyChanging
				Me._TelCliente = value
				Me.SendPropertyChanged("TelCliente")
				Me.OnTelClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorreoCliente", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CorreoCliente() As String
		Get
			Return Me._CorreoCliente
		End Get
		Set
			If (String.Equals(Me._CorreoCliente, value) = false) Then
				Me.OnCorreoClienteChanging(value)
				Me.SendPropertyChanging
				Me._CorreoCliente = value
				Me.SendPropertyChanged("CorreoCliente")
				Me.OnCorreoClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pestador", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Pestador() As String
		Get
			Return Me._Pestador
		End Get
		Set
			If (String.Equals(Me._Pestador, value) = false) Then
				Me.OnPestadorChanging(value)
				Me.SendPropertyChanging
				Me._Pestador = value
				Me.SendPropertyChanged("Pestador")
				Me.OnPestadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sistema", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Sistema() As String
		Get
			Return Me._Sistema
		End Get
		Set
			If (String.Equals(Me._Sistema, value) = false) Then
				Me.OnSistemaChanging(value)
				Me.SendPropertyChanging
				Me._Sistema = value
				Me.SendPropertyChanged("Sistema")
				Me.OnSistemaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Urgente", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property Urgente() As String
		Get
			Return Me._Urgente
		End Get
		Set
			If (String.Equals(Me._Urgente, value) = false) Then
				Me.OnUrgenteChanging(value)
				Me.SendPropertyChanging
				Me._Urgente = value
				Me.SendPropertyChanged("Urgente")
				Me.OnUrgenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TBSALIDAEQU_TBENTRADAMUESTRA", Storage:="_TBENTRADAMUESTRA", ThisKey:="IDMuestreo", OtherKey:="IDMuestreo")>  _
	Public Property TBENTRADAMUESTRA() As EntitySet(Of TBENTRADAMUESTRA)
		Get
			Return Me._TBENTRADAMUESTRA
		End Get
		Set
			Me._TBENTRADAMUESTRA.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TBENTRADAMUESTRA(ByVal entity As TBENTRADAMUESTRA)
		Me.SendPropertyChanging
		entity.TBSALIDAEQU = Me
	End Sub
	
	Private Sub detach_TBENTRADAMUESTRA(ByVal entity As TBENTRADAMUESTRA)
		Me.SendPropertyChanging
		entity.TBSALIDAEQU = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TBENTRADAMUESTRA")>  _
Partial Public Class TBENTRADAMUESTRA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDEntrada As Integer
	
	Private _IDMuestreo As Integer
	
	Private _FechaEntrada As System.Nullable(Of Date)
	
	Private _FechaMuestreo As System.Nullable(Of Date)
	
	Private _Muestreador As String
	
	Private _PuntoMuestreo As String
	
	Private _NombrePuntoMuestreo As String
	
	Private _Pruebas As String
	
	Private _Observaciones As String
	
	Private _TBRESULT As EntitySet(Of TBRESULT)
	
	Private _TBSALIDAEQU As EntityRef(Of TBSALIDAEQU)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDEntradaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDEntradaChanged()
    End Sub
    Partial Private Sub OnIDMuestreoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDMuestreoChanged()
    End Sub
    Partial Private Sub OnFechaEntradaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaEntradaChanged()
    End Sub
    Partial Private Sub OnFechaMuestreoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaMuestreoChanged()
    End Sub
    Partial Private Sub OnMuestreadorChanging(value As String)
    End Sub
    Partial Private Sub OnMuestreadorChanged()
    End Sub
    Partial Private Sub OnPuntoMuestreoChanging(value As String)
    End Sub
    Partial Private Sub OnPuntoMuestreoChanged()
    End Sub
    Partial Private Sub OnNombrePuntoMuestreoChanging(value As String)
    End Sub
    Partial Private Sub OnNombrePuntoMuestreoChanged()
    End Sub
    Partial Private Sub OnPruebasChanging(value As String)
    End Sub
    Partial Private Sub OnPruebasChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TBRESULT = New EntitySet(Of TBRESULT)(AddressOf Me.attach_TBRESULT, AddressOf Me.detach_TBRESULT)
		Me._TBSALIDAEQU = CType(Nothing, EntityRef(Of TBSALIDAEQU))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDEntrada", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDEntrada() As Integer
		Get
			Return Me._IDEntrada
		End Get
		Set
			If ((Me._IDEntrada = value)  _
						= false) Then
				Me.OnIDEntradaChanging(value)
				Me.SendPropertyChanging
				Me._IDEntrada = value
				Me.SendPropertyChanged("IDEntrada")
				Me.OnIDEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDMuestreo", DbType:="Int NOT NULL")>  _
	Public Property IDMuestreo() As Integer
		Get
			Return Me._IDMuestreo
		End Get
		Set
			If ((Me._IDMuestreo = value)  _
						= false) Then
				If Me._TBSALIDAEQU.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDMuestreoChanging(value)
				Me.SendPropertyChanging
				Me._IDMuestreo = value
				Me.SendPropertyChanged("IDMuestreo")
				Me.OnIDMuestreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEntrada", DbType:="Date")>  _
	Public Property FechaEntrada() As System.Nullable(Of Date)
		Get
			Return Me._FechaEntrada
		End Get
		Set
			If (Me._FechaEntrada.Equals(value) = false) Then
				Me.OnFechaEntradaChanging(value)
				Me.SendPropertyChanging
				Me._FechaEntrada = value
				Me.SendPropertyChanged("FechaEntrada")
				Me.OnFechaEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaMuestreo", DbType:="Date")>  _
	Public Property FechaMuestreo() As System.Nullable(Of Date)
		Get
			Return Me._FechaMuestreo
		End Get
		Set
			If (Me._FechaMuestreo.Equals(value) = false) Then
				Me.OnFechaMuestreoChanging(value)
				Me.SendPropertyChanging
				Me._FechaMuestreo = value
				Me.SendPropertyChanged("FechaMuestreo")
				Me.OnFechaMuestreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Muestreador", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Muestreador() As String
		Get
			Return Me._Muestreador
		End Get
		Set
			If (String.Equals(Me._Muestreador, value) = false) Then
				Me.OnMuestreadorChanging(value)
				Me.SendPropertyChanging
				Me._Muestreador = value
				Me.SendPropertyChanged("Muestreador")
				Me.OnMuestreadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PuntoMuestreo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PuntoMuestreo() As String
		Get
			Return Me._PuntoMuestreo
		End Get
		Set
			If (String.Equals(Me._PuntoMuestreo, value) = false) Then
				Me.OnPuntoMuestreoChanging(value)
				Me.SendPropertyChanging
				Me._PuntoMuestreo = value
				Me.SendPropertyChanged("PuntoMuestreo")
				Me.OnPuntoMuestreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombrePuntoMuestreo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NombrePuntoMuestreo() As String
		Get
			Return Me._NombrePuntoMuestreo
		End Get
		Set
			If (String.Equals(Me._NombrePuntoMuestreo, value) = false) Then
				Me.OnNombrePuntoMuestreoChanging(value)
				Me.SendPropertyChanging
				Me._NombrePuntoMuestreo = value
				Me.SendPropertyChanged("NombrePuntoMuestreo")
				Me.OnNombrePuntoMuestreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pruebas", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Pruebas() As String
		Get
			Return Me._Pruebas
		End Get
		Set
			If (String.Equals(Me._Pruebas, value) = false) Then
				Me.OnPruebasChanging(value)
				Me.SendPropertyChanging
				Me._Pruebas = value
				Me.SendPropertyChanged("Pruebas")
				Me.OnPruebasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TBENTRADAMUESTRA_TBRESULT", Storage:="_TBRESULT", ThisKey:="IDMuestreo", OtherKey:="IDMuestreo")>  _
	Public Property TBRESULT() As EntitySet(Of TBRESULT)
		Get
			Return Me._TBRESULT
		End Get
		Set
			Me._TBRESULT.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TBSALIDAEQU_TBENTRADAMUESTRA", Storage:="_TBSALIDAEQU", ThisKey:="IDMuestreo", OtherKey:="IDMuestreo", IsForeignKey:=true)>  _
	Public Property TBSALIDAEQU() As TBSALIDAEQU
		Get
			Return Me._TBSALIDAEQU.Entity
		End Get
		Set
			Dim previousValue As TBSALIDAEQU = Me._TBSALIDAEQU.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TBSALIDAEQU.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TBSALIDAEQU.Entity = Nothing
					previousValue.TBENTRADAMUESTRA.Remove(Me)
				End If
				Me._TBSALIDAEQU.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TBENTRADAMUESTRA.Add(Me)
					Me._IDMuestreo = value.IDMuestreo
				Else
					Me._IDMuestreo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TBSALIDAEQU")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TBRESULT(ByVal entity As TBRESULT)
		Me.SendPropertyChanging
		entity.TBENTRADAMUESTRA = Me
	End Sub
	
	Private Sub detach_TBRESULT(ByVal entity As TBRESULT)
		Me.SendPropertyChanging
		entity.TBENTRADAMUESTRA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TBRESULT")>  _
Partial Public Class TBRESULT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDResult As Integer
	
	Private _IDMuestreo As Integer
	
	Private _Nivel As String
	
	Private _Parametro As String
	
	Private _ValorResul As Double
	
	Private _Unidades As String
	
	Private _VMA As Double
	
	Private _Conformidad As String
	
	Private _TBENTRADAMUESTRA As EntityRef(Of TBENTRADAMUESTRA)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDResultChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDResultChanged()
    End Sub
    Partial Private Sub OnIDMuestreoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDMuestreoChanged()
    End Sub
    Partial Private Sub OnNivelChanging(value As String)
    End Sub
    Partial Private Sub OnNivelChanged()
    End Sub
    Partial Private Sub OnParametroChanging(value As String)
    End Sub
    Partial Private Sub OnParametroChanged()
    End Sub
    Partial Private Sub OnValorResulChanging(value As Double)
    End Sub
    Partial Private Sub OnValorResulChanged()
    End Sub
    Partial Private Sub OnUnidadesChanging(value As String)
    End Sub
    Partial Private Sub OnUnidadesChanged()
    End Sub
    Partial Private Sub OnVMAChanging(value As Double)
    End Sub
    Partial Private Sub OnVMAChanged()
    End Sub
    Partial Private Sub OnConformidadChanging(value As String)
    End Sub
    Partial Private Sub OnConformidadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TBENTRADAMUESTRA = CType(Nothing, EntityRef(Of TBENTRADAMUESTRA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDResult", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDResult() As Integer
		Get
			Return Me._IDResult
		End Get
		Set
			If ((Me._IDResult = value)  _
						= false) Then
				Me.OnIDResultChanging(value)
				Me.SendPropertyChanging
				Me._IDResult = value
				Me.SendPropertyChanged("IDResult")
				Me.OnIDResultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDMuestreo", DbType:="Int NOT NULL")>  _
	Public Property IDMuestreo() As Integer
		Get
			Return Me._IDMuestreo
		End Get
		Set
			If ((Me._IDMuestreo = value)  _
						= false) Then
				If Me._TBENTRADAMUESTRA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDMuestreoChanging(value)
				Me.SendPropertyChanging
				Me._IDMuestreo = value
				Me.SendPropertyChanged("IDMuestreo")
				Me.OnIDMuestreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nivel", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Nivel() As String
		Get
			Return Me._Nivel
		End Get
		Set
			If (String.Equals(Me._Nivel, value) = false) Then
				Me.OnNivelChanging(value)
				Me.SendPropertyChanging
				Me._Nivel = value
				Me.SendPropertyChanged("Nivel")
				Me.OnNivelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parametro", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Parametro() As String
		Get
			Return Me._Parametro
		End Get
		Set
			If (String.Equals(Me._Parametro, value) = false) Then
				Me.OnParametroChanging(value)
				Me.SendPropertyChanging
				Me._Parametro = value
				Me.SendPropertyChanged("Parametro")
				Me.OnParametroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValorResul", DbType:="Float NOT NULL")>  _
	Public Property ValorResul() As Double
		Get
			Return Me._ValorResul
		End Get
		Set
			If ((Me._ValorResul = value)  _
						= false) Then
				Me.OnValorResulChanging(value)
				Me.SendPropertyChanging
				Me._ValorResul = value
				Me.SendPropertyChanged("ValorResul")
				Me.OnValorResulChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unidades", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Unidades() As String
		Get
			Return Me._Unidades
		End Get
		Set
			If (String.Equals(Me._Unidades, value) = false) Then
				Me.OnUnidadesChanging(value)
				Me.SendPropertyChanging
				Me._Unidades = value
				Me.SendPropertyChanged("Unidades")
				Me.OnUnidadesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VMA", DbType:="Float NOT NULL")>  _
	Public Property VMA() As Double
		Get
			Return Me._VMA
		End Get
		Set
			If ((Me._VMA = value)  _
						= false) Then
				Me.OnVMAChanging(value)
				Me.SendPropertyChanging
				Me._VMA = value
				Me.SendPropertyChanged("VMA")
				Me.OnVMAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Conformidad", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Conformidad() As String
		Get
			Return Me._Conformidad
		End Get
		Set
			If (String.Equals(Me._Conformidad, value) = false) Then
				Me.OnConformidadChanging(value)
				Me.SendPropertyChanging
				Me._Conformidad = value
				Me.SendPropertyChanged("Conformidad")
				Me.OnConformidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TBENTRADAMUESTRA_TBRESULT", Storage:="_TBENTRADAMUESTRA", ThisKey:="IDMuestreo", OtherKey:="IDMuestreo", IsForeignKey:=true)>  _
	Public Property TBENTRADAMUESTRA() As TBENTRADAMUESTRA
		Get
			Return Me._TBENTRADAMUESTRA.Entity
		End Get
		Set
			Dim previousValue As TBENTRADAMUESTRA = Me._TBENTRADAMUESTRA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TBENTRADAMUESTRA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TBENTRADAMUESTRA.Entity = Nothing
					previousValue.TBRESULT.Remove(Me)
				End If
				Me._TBENTRADAMUESTRA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TBRESULT.Add(Me)
					Me._IDMuestreo = value.IDMuestreo
				Else
					Me._IDMuestreo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TBENTRADAMUESTRA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class BUSCAR_ENTRADAMUESTRAResult
	
	Private _IDEntrada As Integer
	
	Private _IDMuestreo As Integer
	
	Private _FechaEntrada As System.Nullable(Of Date)
	
	Private _FechaMuestreo As System.Nullable(Of Date)
	
	Private _Muestreador As String
	
	Private _PuntoMuestreo As String
	
	Private _NombrePuntoMuestreo As String
	
	Private _Pruebas As String
	
	Private _Observaciones As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDEntrada", DbType:="Int NOT NULL")>  _
	Public Property IDEntrada() As Integer
		Get
			Return Me._IDEntrada
		End Get
		Set
			If ((Me._IDEntrada = value)  _
						= false) Then
				Me._IDEntrada = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDMuestreo", DbType:="Int NOT NULL")>  _
	Public Property IDMuestreo() As Integer
		Get
			Return Me._IDMuestreo
		End Get
		Set
			If ((Me._IDMuestreo = value)  _
						= false) Then
				Me._IDMuestreo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEntrada", DbType:="Date")>  _
	Public Property FechaEntrada() As System.Nullable(Of Date)
		Get
			Return Me._FechaEntrada
		End Get
		Set
			If (Me._FechaEntrada.Equals(value) = false) Then
				Me._FechaEntrada = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaMuestreo", DbType:="Date")>  _
	Public Property FechaMuestreo() As System.Nullable(Of Date)
		Get
			Return Me._FechaMuestreo
		End Get
		Set
			If (Me._FechaMuestreo.Equals(value) = false) Then
				Me._FechaMuestreo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Muestreador", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Muestreador() As String
		Get
			Return Me._Muestreador
		End Get
		Set
			If (String.Equals(Me._Muestreador, value) = false) Then
				Me._Muestreador = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PuntoMuestreo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PuntoMuestreo() As String
		Get
			Return Me._PuntoMuestreo
		End Get
		Set
			If (String.Equals(Me._PuntoMuestreo, value) = false) Then
				Me._PuntoMuestreo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombrePuntoMuestreo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NombrePuntoMuestreo() As String
		Get
			Return Me._NombrePuntoMuestreo
		End Get
		Set
			If (String.Equals(Me._NombrePuntoMuestreo, value) = false) Then
				Me._NombrePuntoMuestreo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pruebas", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Pruebas() As String
		Get
			Return Me._Pruebas
		End Get
		Set
			If (String.Equals(Me._Pruebas, value) = false) Then
				Me._Pruebas = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me._Observaciones = value
			End If
		End Set
	End Property
End Class

Partial Public Class BUSCAR_RESULTResult
	
	Private _IDResult As Integer
	
	Private _IDMuestreo As Integer
	
	Private _Nivel As String
	
	Private _Parametro As String
	
	Private _ValorResul As Double
	
	Private _Unidades As String
	
	Private _VMA As Double
	
	Private _Conformidad As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDResult", DbType:="Int NOT NULL")>  _
	Public Property IDResult() As Integer
		Get
			Return Me._IDResult
		End Get
		Set
			If ((Me._IDResult = value)  _
						= false) Then
				Me._IDResult = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDMuestreo", DbType:="Int NOT NULL")>  _
	Public Property IDMuestreo() As Integer
		Get
			Return Me._IDMuestreo
		End Get
		Set
			If ((Me._IDMuestreo = value)  _
						= false) Then
				Me._IDMuestreo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nivel", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Nivel() As String
		Get
			Return Me._Nivel
		End Get
		Set
			If (String.Equals(Me._Nivel, value) = false) Then
				Me._Nivel = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parametro", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Parametro() As String
		Get
			Return Me._Parametro
		End Get
		Set
			If (String.Equals(Me._Parametro, value) = false) Then
				Me._Parametro = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValorResul", DbType:="Float NOT NULL")>  _
	Public Property ValorResul() As Double
		Get
			Return Me._ValorResul
		End Get
		Set
			If ((Me._ValorResul = value)  _
						= false) Then
				Me._ValorResul = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unidades", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Unidades() As String
		Get
			Return Me._Unidades
		End Get
		Set
			If (String.Equals(Me._Unidades, value) = false) Then
				Me._Unidades = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VMA", DbType:="Float NOT NULL")>  _
	Public Property VMA() As Double
		Get
			Return Me._VMA
		End Get
		Set
			If ((Me._VMA = value)  _
						= false) Then
				Me._VMA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Conformidad", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Conformidad() As String
		Get
			Return Me._Conformidad
		End Get
		Set
			If (String.Equals(Me._Conformidad, value) = false) Then
				Me._Conformidad = value
			End If
		End Set
	End Property
End Class

Partial Public Class BUSCAR_SALIDAEQUIPOResult
	
	Private _IDMuestreo As Integer
	
	Private _FechaSalida As System.Nullable(Of Date)
	
	Private _Responsable As String
	
	Private _TipoPrueba As String
	
	Private _Cliente As String
	
	Private _TelCliente As Integer
	
	Private _CorreoCliente As String
	
	Private _Pestador As String
	
	Private _Sistema As String
	
	Private _Urgente As String
	
	Private _Observaciones As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDMuestreo", DbType:="Int NOT NULL")>  _
	Public Property IDMuestreo() As Integer
		Get
			Return Me._IDMuestreo
		End Get
		Set
			If ((Me._IDMuestreo = value)  _
						= false) Then
				Me._IDMuestreo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaSalida", DbType:="Date")>  _
	Public Property FechaSalida() As System.Nullable(Of Date)
		Get
			Return Me._FechaSalida
		End Get
		Set
			If (Me._FechaSalida.Equals(value) = false) Then
				Me._FechaSalida = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Responsable", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Responsable() As String
		Get
			Return Me._Responsable
		End Get
		Set
			If (String.Equals(Me._Responsable, value) = false) Then
				Me._Responsable = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoPrueba", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoPrueba() As String
		Get
			Return Me._TipoPrueba
		End Get
		Set
			If (String.Equals(Me._TipoPrueba, value) = false) Then
				Me._TipoPrueba = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Cliente() As String
		Get
			Return Me._Cliente
		End Get
		Set
			If (String.Equals(Me._Cliente, value) = false) Then
				Me._Cliente = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelCliente", DbType:="Int NOT NULL")>  _
	Public Property TelCliente() As Integer
		Get
			Return Me._TelCliente
		End Get
		Set
			If ((Me._TelCliente = value)  _
						= false) Then
				Me._TelCliente = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorreoCliente", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CorreoCliente() As String
		Get
			Return Me._CorreoCliente
		End Get
		Set
			If (String.Equals(Me._CorreoCliente, value) = false) Then
				Me._CorreoCliente = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pestador", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Pestador() As String
		Get
			Return Me._Pestador
		End Get
		Set
			If (String.Equals(Me._Pestador, value) = false) Then
				Me._Pestador = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sistema", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Sistema() As String
		Get
			Return Me._Sistema
		End Get
		Set
			If (String.Equals(Me._Sistema, value) = false) Then
				Me._Sistema = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Urgente", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property Urgente() As String
		Get
			Return Me._Urgente
		End Get
		Set
			If (String.Equals(Me._Urgente, value) = false) Then
				Me._Urgente = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me._Observaciones = value
			End If
		End Set
	End Property
End Class
